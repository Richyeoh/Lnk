#!/usr/bin/env bash

# (()) 语法格式为 ((表达式))
# 使用$获取(())的值
# 在 (( )) 中使用变量无需加上$前缀，(( )) 会自动解析变量名，这使得代码更加简洁，也符合程序员的书写习惯。

# 例子：
echo $((1+1))
echo $((6-3))
x=6
y=7
echo $((x+y))

# 复杂点的运算
echo $((a=1+2+3+4))
echo $a

echo $((b=1+2**3-4%3))
echo $b

# 计算1+100的和
echo $(((1+100)*100/2)) # 等差数列（a1+an）*n/2

# (())的逻辑运算，1为真，0为假
echo $((3>4))
echo $((8==8))

# (())的自增自减
index=0
echo $((index++))
echo $(((index++)))
echo $((index--))

# (())的多表达式
$((a=100,b=200,c=a+b))
echo "$a+$b=$c"

# let 命令
# 和双小括号 (( )) 一样，let 命令也只能进行整数运算，不能对小数（浮点数）或者字符串进行运算
# 用法 let 表达式，let '表达式'，let "表达式"
# 当表达式中含有 Shell 特殊字符（例如 |）时，需要用双引号" "或者单引号' '将表达式包围起来

a=10
b=20
let a+=1 b+=2 #多个表达式使用空格分开
echo $a $b

# $[] 语法格式如下：$[表达式]
# 和 (())、let 命令类似，$[] 也只能进行整数运算。
# $[] 会对表达式进行计算，并取得计算结果。如果表达式中包含了变量，那么你可以加$，也可以不加。
# $[] 不能单独出现使用，必须要有东西接受$[]的计算结果

echo $[3*5]
echo $[(3*5)+5]

# expr 表达式求值
# Shell expr 是一个功能强大，并且比较复杂的命令，它除了可以实现整数计算，还可以结合一些选项对字符串进行处理，例如计算字符串长度、字符串比较、字符串匹配、字符串提取等。
# 用法 expr 表达式
# expr 对表达式的格式有几点特殊的要求
# 出现在表达式中的运算符、数字、变量和小括号的左右两边至少要有一个空格，否则会报错。
# 有些特殊符号必须用反斜杠\进行转义（屏蔽其特殊含义），比如乘号*和小括号()，如果不用\转义，那么 Shell 会把它们误解为正则表达式中的符号（*对应通配符，()对应分组）。
# 使用变量时要加$前缀。
a=100
b=200
echo `expr $a + $b`
echo `expr $a \* $b`

# bc 命令
# -h | --help 帮助信息
# -v | --version 显示命令版本信息
# -l | --mathlib 使用标准数学库
# -i | --interactive 强制交互
# -w | --warn 显示 POSIX 的警告信息
# -s | --standard 使用 POSIX 标准来处理
# -q | --quiet 不显示欢迎信息
# scale 指定精度，也即小数点后的位数；默认为 0，也即不使用小数部分
# ibase 指定输入的数字的进制，默认为十进制
# obase 指定输出的数字的进制，默认为十进制
# last 或者 . 表示最近打印的数字
# 注意：obase 要尽量放在 ibase 前面，因为 ibase 设置后，后面的数字都是以 ibase 的进制来换算的。
# bc 命令还支持一些函数
# s(x) 计算 x 的正弦值，x 是弧度值
# c(x) 计算 x 的余弦值，x 是弧度值
# a(x) 计算 x 的反正切值，返回弧度值
# l(x) 计算 x 的自然对数
# e(x) 求 e 的 x 次方
# j(n, x) 贝塞尔函数，计算从 n 到 x 的阶数

# 借助管道使用 bc 计算器
echo "obase=16;8+8;" | bc -l

# declare -i 的用法
declare -i x y z
x=100
y=200
z=$x+$y
echo $z
