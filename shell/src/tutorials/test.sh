#!/usr/bin/env bash

# test 命令
# 是 Shell 内置命令，用来检测某个条件是否成立。test 通常和 if 语句一起使用，并且大部分 if 语句都依赖 test。
# test 命令有很多选项，可以进行数值、字符串和文件三个方面的检测。
# Shell test 命令的用法为：test expression 当 test 判断 expression 成立时，退出状态为 0，否则为非 0 值。
# test 命令也可以简写为[]，用法[ expression ]
# 注意[]和expression之间的空格，这两个空格是必须的，否则会导致语法错误。[]的写法更加简洁，比 test 使用频率高。
# test 和 [] 是等价的，后续我们会交替使用 test 和 []，以让读者尽快熟悉。
# 在 test 命令中使用变量时，我强烈建议将变量用双引号""包围起来，这样能避免变量为空值时导致的很多奇葩问题。

read first_name
read last_name
if [ -n "$first_name" ] || [ -n "$last_name" ]; then
  echo "$first_name $last_name"
fi

# [[ ]]是 Shell 内置关键字，它和 test 命令类似，也用来检测某个条件是否成立。
# [[ ]] 的用法为：[[ expression ]]
# 当 [[ ]] 判断 expression 成立时，退出状态为 0，否则为非 0 值。注意[[ ]]和expression之间的空格，这两个空格是必须的，否则会导致语法错误。
# [[ ]] 是 Shell 内置关键字，不是命令，在使用时没有给函数传递参数的过程，所以 test 命令的某些注意事项在 [[ ]] 中就不存在了，具体包括：
# 不需要把变量名用双引号""包围起来，即使变量是空值，也不会出错。
# 不需要、也不能对 >、< 进行转义，转义后会出错。
# [[ ]] 支持逻辑运算符
# 对多个表达式进行逻辑运算时，可以使用逻辑运算符将多个 test 命令连接起来，例如：
# [ -z "$str1" ] || [ -z "$str2" ]
# [ -z "$str1" -o -z "$str2" ]
# 使用[[]]对以上命令进行改进
# [[ -z "$str1" || -z "str2"]]

# 注意，[[ ]] 删除了 test 命令的-o和-a选项，所以只能使用 || 和 &&。

# [[ ]] 支持正则表达式 可以使用=~来检测字符串是否符合某个正则表达式，它的用法为 [[ str =~ regex ]]。
tel="18072164946"
if [[ $tel =~ ^1[0-9]{10}$ ]]; then
  echo "您输入的手机号为:$tel"
fi
# 但是 [[ ]] 对数字的比较仍然不友好，所以我建议，以后大家使用 if 判断条件时，用 (()) 来处理整型数字，用 [[ ]] 来处理字符串或者文件。
